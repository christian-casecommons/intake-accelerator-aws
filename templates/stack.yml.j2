AWSTemplateFormatVersion: "2010-09-09"

Description: Intake Accelerator - {{ env }}

Parameters:
  ApplicationImageId:
    Type: String
    Description: Application Amazon Machine Image ID
  ApplicationInstanceType:
    Type: String
    Description: Application EC2 Instance Type
  ApplicationDesiredCount:
    Type: Number
    Description: Application AutoScaling Group Desired Count
  ApplicationDockerImage:
    Type: String
    Description: Docker Image for Application
  ApplicationDockerImageTag:
    Type: String
    Description: Docker Image Tag for Application
    Default: latest
  ApplicationKeyName:
    Type: String
    Description: EC2 Key Pair for Application SSH Access
  ApplicationFrontEndPort:
    Type: Number
    Description: Application Front End HTTP Port
  ApplicationFrontEndCertificateArn:
    Type: String
    Description: Application Load Balancer Certificate ARN
  ApplicationPort:
    Type: Number
    Description: Application HTTP Port
  ApplicationDomain:
    Type: String
    Description: Base public domain of the application URL
  ApplicationCacheFailover:
    Type: String
    Description: Enables/disables Redis cache automatic failover
    AllowedValues:
      - "True"
      - "False"
    Default: "False"
  ApplicationCacheInstanceCount:
    Type: Number
    Description: Number of Redis cache instances
    Default: 1
  ApplicationCacheInstanceType:
    Type: String
    Description: Type of Redis cache instance
    Default: cache.t2.micro
  ApplicationCacheVersion:
    Type: String
    Description: Redis cache version
    Default: "3.2.4"
  ApplicationApiUrl:
    Type: String
    Description: Intake API URL Endpoint
  ApplicationAuthentication:
    Type: String
    Description: Enables or disables authentication
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  ApplicationAuthenticationUrl:
    Type: String
    Description: Authentication URL for the Intake Accelerator application
  ApplicationHostname:
    Type: String
    Description: Host portion of the application URL
  LogRetention:
    Type: Number
    Description: Log retention in days
  NginxDockerImage:
    Type: String
    Description: Docker Image for Nginx
  NginxDockerImageTag:
    Type: String
    Description: Docker Image Tag for Nginx
    Default: latest
  ApplicationSecretKey:
    Type: String
    Description: KMS Encrypted Secret Key Base

Conditions:
  ApplicationSingleInstanceCondition:
    Fn::Equals:
      - Ref: ApplicationDesiredCount
      - 1

Resources:
  # Intake API resources
  ApplicationFrontEnd:
    Type: Stack::Transform
    Template: alb.yml.j2
    Properties:
      Name: ApplicationFrontEnd
      AllowedCidr: 0.0.0.0/0
      Certificate:
        Fn::ImportValue:
          Ref: ApplicationFrontEndCertificateArn
      ConnectionDrainTimeout: 60
      DnsHostname:
        Ref: ApplicationHostname
      DnsDomain:
        Ref: ApplicationDomain
      HttpsPort:
        Ref: ApplicationFrontEndPort
      Scheme: internet-facing
      Subnets: Public
      TargetGroupPort:
        Ref: ApplicationPort
      TargetSecurityGroup:
        Fn::Sub: ${ApplicationCluster.SecurityGroup}

  ApplicationCluster:
    Type: Stack::Transform
    Template: asg.yml.j2
    Properties:
      Name: ApplicationCluster
      DesiredCount:
        Ref: ApplicationDesiredCount
      ImageId:
        Ref: ApplicationImageId
      InstanceType:
        Ref: ApplicationInstanceType
      KeyName:
        Ref: ApplicationKeyName
      Subnets: Medium
      ProxyEnabled: "True"
      ProxyUrl:
        Fn::ImportValue: DefaultProxyURL
      VpcName: Default
      DockerNetworkMode: "host"

  ApplicationCache:
    Type: Stack::Transform
    Template: ecache.yml.j2
    Properties:
      FailoverEnabled:
        Ref: ApplicationCacheFailover
      NumClusters:
        Ref: ApplicationCacheInstanceCount
      NodeType:
        Ref: ApplicationCacheInstanceType
      Port: 6379
      Engine: redis
      Version:
        Ref: ApplicationCacheVersion
      MaintenanceWindow: "sun:10:30-sun:12:00"
      IngressSecurityGroup:
        Fn.Sub: ${ApplicationCluster.SecurityGroup}

  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: host
      Volumes:
        - Name: webroot
          Host: {}
      ContainerDefinitions:
      - Name: intake
        Image:
          Fn::Sub: ${ApplicationDockerImage}:${ApplicationDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        Environment:
          - Name: KMS_SECRET_KEY_BASE
            Value:
              Ref: ApplicationSecretKey
          - Name: RAILS_ENV
            Value: production
          - Name: NODE_ENV
            Value: production
          - Name: API_URL
            Value:
              Ref: ApplicationApiUrl
          - Name: REDIS_HOST
            Value:
              Fn::Sub: ${ApplicationCache.EndPoint}
          - Name: REDIS_PORT
            Value: "6379"
          - Name: AUTHENTICATION
            Value:
              Ref: ApplicationAuthentication
          - Name: AUTHENTICATION_URL
            Value:
              Ref: ApplicationAuthenticationUrl
          - Name: http_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: https_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: no_proxy
            Value: "169.254.169.254,localhost"
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        Command:
          - bundle
          - exec
          - puma
          - -e
          - production
          - -b
          - unix:///tmp/app.sock
          - -C
          - config/puma.rb
      - Name: nginx
        Image:
          Fn::Sub: ${NginxDockerImage}:${NginxDockerImageTag}
        MemoryReservation: 200
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker
        PortMappings:
        - ContainerPort:
            Ref: ApplicationPort
          Protocol: tcp
        Environment:
          - Name: HTTP_PORT
            Value:
              Ref: ApplicationPort
          - Name: WEB_ROOT
            Value: /ca_intake/public
          - Name: UPSTREAM_URL
            Value: unix:///tmp/app.sock
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        VolumesFrom:
          - SourceContainer: intake
            ReadOnly: "true"
  IntakeAcceleratorServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
      RetentionInDays:
        Ref: LogRetention
  IntakeAcceleratorNginxLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
      RetentionInDays:
        Ref: LogRetention
  IntakeAcceleratorService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationFrontEndHttpsListener
      - ApplicationClusterAutoscalingGroup
      - IntakeAcceleratorServiceLogGroup
      - IntakeAcceleratorNginxLogGroup
    Properties:
      Cluster:
        Ref: ApplicationClusterEcsCluster
      TaskDefinition:
        Ref: ApplicationTaskDefinition
      DesiredCount:
        Ref: ApplicationDesiredCount
      DeploymentConfiguration:
          MinimumHealthyPercent:
            Fn::If:
              - ApplicationSingleInstanceCondition
              - 0
              - 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort:
            Ref: ApplicationPort
          TargetGroupArn:
            Fn::Sub: ${ApplicationFrontEnd.TargetGroup}
      Role:
        Ref: EcsServiceRole
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "ecs.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
