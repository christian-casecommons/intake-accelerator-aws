AWSTemplateFormatVersion: "2010-09-09"

Description: Intake Accelerator - {{ env }}

Parameters:
  ApplicationImageId:
    Type: String
    Description: Application Amazon Machine Image ID
  ApplicationInstanceType:
    Type: String
    Description: Application EC2 Instance Type
  ApplicationDesiredCount:
    Type: Number
    Description: Application AutoScaling Group Desired Count
  ApplicationDockerImage:
    Type: String
    Description: Docker Image for Application
  ApplicationDockerImageTag:
    Type: String
    Description: Docker Image Tag for Application
    Default: latest
  ApplicationKeyName:
    Type: String
    Description: EC2 Key Pair for Application SSH Access
  ApplicationLoadBalancerPort:
    Type: Number
    Description: Application Front End HTTP Port
  ApplicationLoadBalancerCertificateArn:
    Type: String
    Description: Application Load Balancer Certificate ARN
  ApplicationPort:
    Type: Number
    Description: Application HTTP Port
  ApplicationDomain:
    Type: String
    Description: Base public domain of the application URL
  ApplicationCacheFailover:
    Type: String
    Description: Enables/disables Redis cache automatic failover
    AllowedValues:
      - "True"
      - "False"
    Default: "False"
  ApplicationCacheInstanceCount:
    Type: Number
    Description: Number of Redis cache instances
    Default: 1
  ApplicationCacheInstanceType:
    Type: String
    Description: Type of Redis cache instance
    Default: cache.t2.micro
  ApplicationCacheVersion:
    Type: String
    Description: Redis cache version
    Default: "3.2.4"
  ApplicationApiUrl:
    Type: String
    Description: Intake API URL Endpoint
  ApplicationAuthentication:
    Type: String
    Description: Enables or disables authentication
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  ApplicationAuthenticationUrl:
    Type: String
    Description: Authentication URL for the Intake Accelerator application
  ApplicationHostname:
    Type: String
    Description: Host portion of the application URL
  LogRetention:
    Type: Number
    Description: Log retention in days
  NginxDockerImage:
    Type: String
    Description: Docker Image for Nginx
  NginxDockerImageTag:
    Type: String
    Description: Docker Image Tag for Nginx
    Default: latest
  ApplicationSecretKey:
    Type: String
    Description: KMS Encrypted Secret Key Base

Conditions:
  ApplicationSingleInstanceCondition:
    Fn::Equals:
      - Ref: ApplicationDesiredCount
      - 1
  ApplicationCacheFailoverEnabled:
    Fn::Equals: 
      - { "Ref" : "ApplicationCacheFailover" }
      - "True"

Resources:
  ApplicationDnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: 
        Fn::Sub: "${ApplicationHostname}.${ApplicationDomain}"
      TTL: "300"
      HostedZoneName: 
        Fn::Sub: "${ApplicationDomain}."
      Type: "CNAME"
      Comment: 
        Fn::Sub: "Intake Accelerator Application - ${AWS::StackName}"
      ResourceRecords: 
        - Fn::Sub: "${ApplicationLoadBalancer.DNSName}"
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: "internet-facing"
      SecurityGroups:
       - Ref: "ApplicationLoadBalancerSecurityGroup"
      Subnets:
        - Fn::ImportValue: DefaultPublicSubnetA
        - Fn::ImportValue: DefaultPublicSubnetB
      LoadBalancerAttributes: 
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 30
      Tags:
        - Key: "Name"
          Value:
            Fn::Sub: ${AWS::StackName}-lb
  ApplicationLoadBalancerApplicationListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn:
            Fn::ImportValue:
              Ref: ApplicationLoadBalancerCertificateArn
      DefaultActions:
        - TargetGroupArn: { "Ref": "IntakeAcceleratorServiceTargetGroup" }
          Type: forward
      LoadBalancerArn: { "Ref": "ApplicationLoadBalancer" }
      Port: { "Ref": "ApplicationLoadBalancerPort" }
      Protocol: "HTTPS"
  IntakeAcceleratorServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      Protocol: "HTTP"
      Port: { "Ref": "ApplicationPort" }
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 60
  ApplicationLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      GroupDescription: "Intake Accelerator Load Balancer Security Group"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: { "Ref": "ApplicationLoadBalancerPort" }
          ToPort: { "Ref": "ApplicationLoadBalancerPort" }
          CidrIp: "0.0.0.0/0"
  ApplicationLoadBalancerToApplicationIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: { "Ref": "ApplicationPort" }
      ToPort: { "Ref": "ApplicationPort" }
      GroupId: { "Ref": "ApplicationAutoscalingSecurityGroup" }
      SourceSecurityGroupId: { "Ref": "ApplicationLoadBalancerSecurityGroup" }
  ApplicationLoadBalancerToApplicationEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "tcp"
      FromPort: { "Ref": "ApplicationPort" }
      ToPort: { "Ref": "ApplicationPort" }
      GroupId: { "Ref": "ApplicationLoadBalancerSecurityGroup" }
      DestinationSecurityGroupId: { "Ref": "ApplicationAutoscalingSecurityGroup" }
  ApplicationAutoscaling:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn:
      - DmesgLogGroup
      - DockerLogGroup
      - EcsAgentLogGroup
      - EcsInitLogGroup
      - MessagesLogGroup
    CreationPolicy:
      ResourceSignal:
        Count: { "Ref": "ApplicationDesiredCount"}
        Timeout: "PT15M"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: { "Ref": "ApplicationDesiredCount"}
        MinSuccessfulInstancesPercent: "100"
        WaitOnResourceSignals: "true"
        PauseTime: "PT15M"
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: "DefaultMediumSubnetA"
        - Fn::ImportValue: "DefaultMediumSubnetB"
      LaunchConfigurationName: { "Ref" : "ApplicationAutoscalingLaunchConfiguration" }
      MinSize: "0"
      MaxSize: "4"
      DesiredCapacity: { "Ref": "ApplicationDesiredCount"}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-instance
          PropagateAtLaunch: "true"
  ApplicationAutoscalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            10_first_run:
              command: "sh firstrun.sh"
              env:
                STACK_NAME: { "Ref": "AWS::StackName" }
                AUTOSCALING_GROUP: "ApplicationAutoscaling"
                AWS_DEFAULT_REGION: { "Ref": "AWS::Region" }
                ECS_CLUSTER: { "Ref": "ApplicationCluster" }
                DOCKER_NETWORK_MODE: host
                PROXY_URL:
                  Fn::ImportValue: DefaultProxyURL
              cwd: "/home/ec2-user/"
          files:
            /etc/ecs/ecs.config:
              content: 
                Fn::Sub: "ECS_CLUSTER=${ApplicationCluster}\n"
    Properties:
      ImageId: { "Ref": "ApplicationImageId" }
      InstanceType: { "Ref": "ApplicationInstanceType" }
      IamInstanceProfile: { "Ref": "ApplicationAutoscalingInstanceProfile" }
      KeyName: { "Ref": "ApplicationKeyName" }
      SecurityGroups:
        - Ref: "ApplicationAutoscalingSecurityGroup"
      UserData: 
        Fn::Base64:
          Fn::Join: ["\n", [
            "#!/bin/bash",
            "set -e",
            "Fn::Join": ["", [
              "Fn::Sub": "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationAutoscalingLaunchConfiguration --region ${AWS::Region}",
              "    --http-proxy ", "Fn::ImportValue": "DefaultProxyURL", 
              "    --https-proxy ", "Fn::ImportValue": "DefaultProxyURL"
            ] ],
            "Fn::Join": ["", [
              "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationAutoscaling --region ${AWS::Region}",
              "    --http-proxy ", "Fn::ImportValue": "DefaultProxyURL", 
              "    --https-proxy ", "Fn::ImportValue": "DefaultProxyURL"
            ] ]
          ] ]
  ApplicationAutoscalingSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Fn::ImportValue: "DefaultVpcId"
      GroupDescription: "Intake Accelerator Security Group"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: "DefaultManagementSubnetACidr"
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: "DefaultManagementSubnetBCidr"
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId:
            Fn::ImportValue: DefaultProxySecurityGroup
        - IpProtocol: "udp"
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::Join: ["", [
              "Fn::ImportValue": "DefaultVpcDnsServer", "/32"
            ] ]
        - IpProtocol: "udp"
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
  ApplicationAutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [ "ec2.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      ManagedPolicyArns: []
      Policies:
        - {{ cf_cloudwatch_ec2_logs_policy | to_json }}
        - PolicyName: "EC2ContainerInstancePolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:RegisterContainerInstance"
                  - "ecs:DeregisterContainerInstance"
                Resource: 
                  Fn::Sub: "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ApplicationCluster}"
              - Effect: "Allow"
                Action:
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Submit*"
                  - "ecs:Poll"
                  - "ecs:StartTelemetrySession"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: "Allow"
                Action:
                - "kms:Decrypt"
                - "kms:DescribeKey"
                Resource:
                  Fn::ImportValue: "CfnMasterKeyArn"
  ApplicationAutoscalingInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: [ { "Ref": "ApplicationAutoscalingRole" } ]
  ApplicationCache:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Properties:
      ReplicationGroupDescription: 
        Fn::Sub: ${AWS::StackName}-redis-cache
      AutomaticFailoverEnabled: { "Ref": "ApplicationCacheFailover" }
      NumCacheClusters: { "Ref": "ApplicationCacheInstanceCount" }
      CacheNodeType: { "Ref": "ApplicationCacheInstanceType" }
      Port: "6379"
      Engine: "redis"
      EngineVersion: { "Ref": "ApplicationCacheVersion" }
      CacheSubnetGroupName: { "Ref": "ApplicationCacheSubnetGroup" }
      PreferredMaintenanceWindow: "sun:10:30-sun:12:00"
      SnapshotWindow: 
        Fn::If:
          - "ApplicationCacheFailoverEnabled"
          - "08:00-10:00"
          - { "Ref": "AWS::NoValue" }
      SecurityGroupIds:
        - { "Ref" : "ApplicationCacheSecurityGroup" }
  ApplicationCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName}-redis-cache-subnet-group
      SubnetIds:
        - Fn::ImportValue: DefaultHighSubnetA
        - Fn::ImportValue: DefaultHighSubnetB
  ApplicationCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-redis-cache-sg
      VpcId:
        Fn::ImportValue: DefaultVpcId
      SecurityGroupEgress:
        - IpProtocol: "icmp"
          FromPort : -1
          ToPort : -1
          CidrIp: "192.0.2.0/24"
  ApplicationToApplicationCacheEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "6379"
      ToPort: "6379"
      GroupId: { "Ref": "ApplicationAutoscalingSecurityGroup" }
      DestinationSecurityGroupId: { "Ref": "ApplicationCacheSecurityGroup" }
  ApplicationToApplicationCacheIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "6379"
      ToPort: "6379"
      GroupId: { "Ref": "ApplicationCacheSecurityGroup" }
      SourceSecurityGroupId: { "Ref": "ApplicationAutoscalingSecurityGroup" }
  ApplicationCluster:
    Type: "AWS::ECS::Cluster"
  ApplicationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      NetworkMode: host
      Volumes:
        - Name: webroot
          Host: {}
      ContainerDefinitions:
      - Name: intake
        Image:
          Fn::Sub: ${ApplicationDockerImage}:${ApplicationDockerImageTag}
        MemoryReservation: 500
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
            awslogs-region: { "Ref": "AWS::Region" }
            awslogs-stream-prefix: docker
        Environment:
          - Name: KMS_SECRET_KEY_BASE
            Value: { "Ref": "ApplicationSecretKey" }
          - Name: RAILS_ENV
            Value: production
          - Name: NODE_ENV
            Value: production
          - Name: API_URL
            Value: { "Ref": "ApplicationApiUrl" }
          - Name: REDIS_HOST
            Value:
              Fn::Sub: ${ApplicationCache.PrimaryEndPoint.Address}
          - Name: REDIS_PORT
            Value: "6379"
          - Name: AUTHENTICATION
            Value: { "Ref": "ApplicationAuthentication" }
          - Name: AUTHENTICATION_URL
            Value: { "Ref": "ApplicationAuthenticationUrl" }
          - Name: http_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: https_proxy
            Value:
              Fn::ImportValue: DefaultProxyURL
          - Name: no_proxy
            Value: "169.254.169.254,localhost"
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        Command:
          - bundle
          - exec
          - puma
          - -e
          - production
          - -b
          - unix:///tmp/app.sock
          - -C
          - config/puma.rb
      - Name: nginx
        Image:
          Fn::Sub: ${NginxDockerImage}:${NginxDockerImageTag}
        MemoryReservation: 200
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: 
              Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
            awslogs-region: { "Ref": "AWS::Region" }
            awslogs-stream-prefix: docker
        PortMappings:
        - ContainerPort: { "Ref": "ApplicationPort" }
          Protocol: tcp
        Environment:
          - Name: HTTP_PORT 
            Value: { "Ref": "ApplicationPort" }
          - Name: WEB_ROOT
            Value: /ca_intake/public
          - Name: UPSTREAM_URL
            Value: unix:///tmp/app.sock
        MountPoints:
          - SourceVolume: webroot
            ContainerPath: /tmp
        VolumesFrom:
          - SourceContainer: intake
            ReadOnly: "true"
  IntakeAcceleratorService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ApplicationLoadBalancer
      - ApplicationAutoscaling
      - IntakeAcceleratorServiceLogGroup
      - IntakeAcceleratorNginxLogGroup
    Properties:
      Cluster: { "Ref": "ApplicationCluster" }
      TaskDefinition: { "Ref": "ApplicationTaskDefinition" }
      DesiredCount: { "Ref": "ApplicationDesiredCount"}
      DeploymentConfiguration:
          MinimumHealthyPercent:
            Fn::If:
              - "ApplicationSingleInstanceCondition"
              - 0
              - 50
          MaximumPercent: 200
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: { "Ref": "ApplicationPort" }
          TargetGroupArn: { "Ref": "IntakeAcceleratorServiceTargetGroup" }
      Role: { "Ref": "EcsServiceRole" }
  EcsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: [ "ecs.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
  DmesgLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/dmesg
      RetentionInDays: { "Ref": "LogRetention" }
  DockerLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/docker
      RetentionInDays: { "Ref": "LogRetention" }
  EcsAgentLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName: 
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-agent
      RetentionInDays: { "Ref": "LogRetention" }
  EcsInitLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/ecs/ecs-init
      RetentionInDays: { "Ref": "LogRetention" }
  MessagesLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ec2/ApplicationAutoscaling/var/log/messages
      RetentionInDays: { "Ref": "LogRetention" }
  IntakeAcceleratorServiceLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/intake
      RetentionInDays: { "Ref": "LogRetention" }
  IntakeAcceleratorNginxLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "{{ config_log_deletion_policy }}"
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}/ecs/IntakeAcceleratorService/nginx
      RetentionInDays: { "Ref": "LogRetention" }
